from collections import namedtuple
import unittest
from lstm_word_segmentation.text_helpers import remove_tags, clean_line, normalize_string


class TestRemoveTags(unittest.TestCase):

    def test_remove_tags(self):
        TestCase = namedtuple("TestCase", ["line", "st_tag", "fn_tag", "expected"])
        cases = [
            TestCase("Word segmentation is an interesting problem.", "<NE>", "</NE>",
                     "Word segmentation is an interesting problem."),
            TestCase("|Word| |segmentation| |is| |an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word| |segmentation| |is| |an| |interesting| |problem|.|"),
            TestCase("Word| |segmentation| |is| |an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "Word| |segmentation| |is| |an| |interesting| |problem|.|"),
            TestCase("Word| |segmentation| |is| |an| |interesting| |problem|.", "<NE>", "</NE>",
                     "Word| |segmentation| |is| |an| |interesting| |problem|."),
            TestCase("|Word| |segmentation| |is| |an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word| |segmentation| |is| |an| |interesting| |problem|.|"),
            TestCase("|Word| |<NE>segmentation is</NE>| |an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word| | |an| |interesting| |problem|.|"),
            TestCase("|Word| |<NE>segmentation is</NE>|an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word| |an| |interesting| |problem|.|"),
            TestCase("|Word|<NE>segmentation is</NE>| |an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word| |an| |interesting| |problem|.|"),
            TestCase("|Word|<NE>segmentation is</NE>|an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|Word|an| |interesting| |problem|.|"),
            TestCase("<NE>segmentation is</NE>|an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|an| |interesting| |problem|.|"),
            TestCase("|<NE>segmentation is</NE>|an| |interesting| |problem|.|", "<NE>", "</NE>",
                     "|an| |interesting| |problem|.|"),
            TestCase("|word| |<NE>segmentation is</NE>|<NE>an interesting</NE>| |problem|.|", "<NE>", "</NE>",
                     "|word| | |problem|.|"),
            TestCase("|word| |<NE>segmentation is</NE>|    <NE>an interesting</NE>| |problem|.|", "<NE>", "</NE>",
                     "|word| | |problem|.|"),
            TestCase("|word| |<NE>segmentation is</NE>| <NE>an interesting</NE> blah | |problem|.|", "<NE>", "</NE>",
                     "|word| | |problem|.|"),
            TestCase("|word| |<NE>segmentation is</NE>| |<NE>an interesting</NE>| |problem|.|", "<NE>", "</NE>",
                     "|word| | | |problem|.|"),
            TestCase("|word|<NE>segmentation is</NE>|<NE>an interesting</NE>| |problem|.|", "<NE>", "</NE>",
                     "|word| |problem|.|"),
            TestCase("|word| |<NE>segmentation is</NE>|", "<NE>", "</NE>",
                     "|word| |"),
            TestCase("|word| |<NE>segmentation is</NE>", "<NE>", "</NE>",
                     "|word| |"),
            TestCase("|word| <NE>segmentation is</NE>", "<NE>", "</NE>",
                     "|word|"),
            TestCase("|word| <NE>segmentation is</NE>", "<NE>", "</NE>|",
                     "|word|"),
            TestCase("|<NE>segmentation is</NE>", "<NE>", "</NE>",
                     "|"),
            TestCase("|<NE>segmentation is</NE>|", "<NE>", "</NE>",
                     "|"),
            TestCase("<NE>segmentation is</NE>", "<NE>", "</NE>",
                     ""),
            TestCase("|<NE>segmentation is</NE>|", "<NE>", "</NE>",
                     "|"),
            TestCase("word|<NE>segmentation| |is</NE>|an|interesting|problem|", "<NE>", "</NE>",
                     "word|an|interesting|problem|"),
            TestCase("word|<NE>segmentation is</NE>|<AB>an interesting</AB>|problem|", "<NE>", "</NE>",
                     "word|<AB>an interesting</AB>|problem|"),
            TestCase("word|<NE>segmentation is</NE>|<AB>an interesting</AB>|problem| ", "<NE>", "</NE>",
                     "word|<AB>an interesting</AB>|problem| "),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| ", "<NE>", "</NE>",
                     "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| "),
            TestCase("|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| ", "<AB>", "</AB>",
                     "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠| "),
        ]
        for cas in cases:
            computed = remove_tags(cas.line, cas.st_tag, cas.fn_tag)
            self.assertEqual(cas.expected, computed)

    def test_clean_line(self):
        TestCase = namedtuple("TestCase", ["line", "expected"])
        cases = [
            TestCase("Word segmentation is https an interesting problem.", -1),
            TestCase("Word segmentation is an interesting problem.", -1),
            TestCase("|Word| |segmentation| |is| |an| |interesting| |problem|.|", -1),
            TestCase("|", -1),
            TestCase("", -1),
            TestCase(" ", -1),
            TestCase("| |", -1),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|", -1),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>| |<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠/AB>", -1),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>|", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| |", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠| |"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞ https ‡∏Å‡∏∞‡πÄ</AB>| |", -1),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>|a", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|a|"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>|ab", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|ab|"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>|ab|", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|ab|"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>|ab |", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|ab |"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| |", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠| |"),
            TestCase("|<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| ", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("<NE>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏≤</NE>|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|<AB>‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏∞‡πÄ</AB>| ", "|‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠ ", "|word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("  word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠ ", "|word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
            TestCase("  |word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠ ", "|word segmentation is interesting ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠|"),
        ]
        for cas in cases:
            computed = clean_line(cas.line)
            self.assertEqual(cas.expected, computed)

    def test_normalize_string(self):
        TestCase = namedtuple("TestCase", ["in_str", "scripts", "out_str"])
        cases = [
            TestCase("abc", ["Latn"], "abc"),
            TestCase("abc", [], "LLL"),
            TestCase("aëÑå", ["Latn", "Cakm"], "aëÑå"),
            TestCase("aëÑå", ["Latn"], "aëÑÉ"),
            TestCase("aëÑå", ["Cakm"], "LëÑå"),
            TestCase("aëÑå", [], "LëÑÉ"),
            # NOTE: ASCII digits have script Common, not Latin
            TestCase("123", ["Latn"], "000"),
            TestCase("·ÅÅ·ÅÅ·ÅÅ", ["Mymr"], "·ÅÅ·ÅÅ·ÅÅ"),
            TestCase("·ÅÅ·ÅÅ·ÅÅ", [], "·ÅÄ·ÅÄ·ÅÄ"),
            # NOTE: Currency symbols have script Common
            TestCase("‡∏ø100", ["Thai"], "$000"),
            TestCase("‡∏ø100", [], "$000"),
            TestCase(
                "‡∏û‡∏±‡∏ô‡πÇ‡∏ó‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏®‡∏±‡∏Å‡∏î‡∏¥‡∏®‡∏à‡∏µ ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤ (‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°: ‡∏õ‡∏£‡∏∞‡πÑ‡∏û; 10 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 2445 ‚Äî 30 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 2518) ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏°‡∏á‡∏Å‡∏∏‡∏é‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
                ["Thai"],
                "‡∏û‡∏±‡∏ô‡πÇ‡∏ó‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏®‡∏±‡∏Å‡∏î‡∏¥‡∏®‡∏à‡∏µ ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤ (‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°: ‡∏õ‡∏£‡∏∞‡πÑ‡∏û; 00 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 0000 ‚Äî 00 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 0000) ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏°‡∏á‡∏Å‡∏∏‡∏é‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß"),
            TestCase(
                "‡∏û‡∏±‡∏ô‡πÇ‡∏ó‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏®‡∏±‡∏Å‡∏î‡∏¥‡∏®‡∏à‡∏µ ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤ (‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°: ‡∏õ‡∏£‡∏∞‡πÑ‡∏û; 10 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 2445 ‚Äî 30 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô ‡∏û.‡∏®. 2518) ‡∏û‡∏£‡∏∞‡∏ß‡∏£‡∏£‡∏≤‡∏ä‡∏ä‡∏≤‡∏¢‡∏≤‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏°‡∏á‡∏Å‡∏∏‡∏é‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß",
                [],
                "‡∏ó‡∏±‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏¥‡∏ó ‡∏ó‡∏ó‡∏ó‡∏ó‡πá‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡πâ‡∏ó‡∏ó‡∏¥‡∏ó‡∏ó‡∏ó‡∏ó‡∏±‡∏ó‡∏ó‡∏¥‡∏ó‡∏ó‡∏µ ‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó (‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏¥‡∏ó: ‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó; 00 ‡∏ó‡∏¥‡∏ó‡∏∏‡∏ó‡∏ó‡∏ó‡∏ó ‡∏ó.‡∏ó. 0000 ‚Äî 00 ‡∏ó‡∏ó‡∏ó‡∏ó‡∏¥‡∏ó‡∏ó‡∏ó‡∏ó ‡∏ó.‡∏ó. 0000) ‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡πá‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏ó‡∏∏‡∏ó‡∏ó‡∏ó‡∏ó‡πâ‡∏ó‡∏ó‡∏ó‡πâ‡∏ó‡∏ó‡∏ó‡∏π‡πà‡∏ó‡∏±‡∏ó"),
        ]
        for cas in cases:
            actual = normalize_string(cas.in_str, cas.scripts)
            self.assertEqual(cas.out_str, actual, cas)


if __name__ == "__main__":
    unittest.main()

